{
  "extends": ["airbnb", "plugin:react-hooks/recommended", "prettier"],
  "plugins": [
    "import",
    "simple-import-sort",
    "eslint-plugin-prettier",
    "react",
    "jsx-a11y",
    "eslint-plugin-react"
  ],
  "parserOptions": {
    "ecmaVersion": 2020
  },
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "ignorePatterns": ["node_modules/", "public/"],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": {
        "babel-module": {},
        "paths": ["src"]
      }
    }
  },
  "rules": {
    "strict": 0,
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "import/prefer-default-export": "off",
    "import/order": "off",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Node.js builtins. You could also generate this regex if you use a `.js` config.
          // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
          [
            "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
          ],
          // Packages. `react` related packages come first.
          ["^react", "^@?\\w"],
          // Internal packages.
          ["^(@|@company|@ui|components|utils|config|vendored-lib)(/.*|$)"],
          // Side effect imports.
          ["^\\u0000"],
          // Parent imports. Put `..` last.
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
          // Other relative imports. Put same-folder imports and `.` last.
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
          // Style imports.
          ["^.+\\.s?css$"]
        ]
      }
    ],
    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": false }],
    "simple-import-sort/exports": "error",
    "sort-imports": "off",
    "no-unused-vars": ["warn"],
    "no-useless-escape": ["warn"],
    "camelcase": "off",
    "no-use-before-define": "off",
    "global-require": [0],
    "prettier/prettier": ["error"],
    "jsx-a11y/label-has-associated-control": [
      2,
      {
        "labelAttributes": ["label"],
        "assert": "htmlFor",
        "depth": 3
      }
    ],
    "react/function-component-definition": [2, { "namedComponents": "arrow-function" }],
    "react/react-in-jsx-scope": "off",
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
    "react/prefer-stateless-function": [0],
    "react/jsx-indent": [0],
    "react/sort-comp": [0],
    "react/destructuring-assignment": [0],
    "react/forbid-prop-types": [0],
    "react/prop-types": [0],
    "react/jsx-props-no-spreading": [1],
    "react/no-unescaped-entities": ["error", { "forbid": [">", "}"] }],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ]
  }
}
