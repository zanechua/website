{"version":3,"file":"component---src-templates-tags-jsx-22ea132063218f60fd86.js","mappings":"oLAoGA,UA3FaA,IAAsC,IAArC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAUH,EAC3C,MAAM,IAAEI,GAAQH,GACV,MAAEI,EAAK,WAAEC,GAAeJ,EAAKK,kBAC7BC,EAAQH,EACXI,QAAOC,KAAUA,EAAKC,KAAKC,YAAYC,OACvCC,KAAIJ,GAAQK,EAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKP,EAAKC,KAAKO,GAAIC,KAAMT,EAAKC,SAEvD,OACEI,EAAAA,cAACK,EAAAA,EAAM,KACLL,EAAAA,cAACM,EAAAA,EAAG,CACFC,SAAU,CAAC,WAAY,UAAW,cAAe,aACjDC,MAAM,OACNC,KAAMrB,EAASsB,WAGjBV,EAAAA,cAAA,eACEA,EAAAA,cAAA,OAAKW,UAAU,6CACbX,EAAAA,cAAA,OAAKW,UAAU,UACbX,EAAAA,cAAA,MAAIW,UAAU,sBACXpB,EAAW,gBAAc,IAC1BS,EAAAA,cAAA,QAAMW,UAAU,2GACbtB,GACK,IAAI,QAIhBW,EAAAA,cAAA,OAAKW,UAAU,6BACbX,EAAAA,cAACY,EAAAA,KAAI,CAACC,GAAG,QAAQF,UAAU,aAAY,cAK3CX,EAAAA,cAAA,OAAKW,UAAU,gBAAgBlB,IAE1B,C,qFC4Bb,IA/DiBR,IAAe,IAAd,KAAEmB,GAAMnB,EACxB,MAAM6B,GAAcC,EAAAA,EAAAA,GAAOX,EAAKP,YAAYmB,gBAItC,KAAEC,GAASb,EAAKP,YAEtB,OACEG,EAAAA,cAAA,OAAKW,UAAU,uBACbX,EAAAA,cAACY,EAAAA,KAAI,CACHC,GAAIT,EAAKc,OAAOC,QAChBR,UAAU,uHACVS,MAAO,CACLC,gBAAkB,OAAMP,KACxBQ,mBAAoB,iBAEtBd,MAAOJ,EAAKP,YAAYW,QAE1BR,EAAAA,cAAA,OAAKW,UAAU,wMACbX,EAAAA,cAACY,EAAAA,KAAI,CAACC,GAAIT,EAAKc,OAAOC,SACpBnB,EAAAA,cAAA,OAAKW,UAAU,QACbX,EAAAA,cAAA,OAAKW,UAAU,+CACZP,EAAKP,YAAYW,OAEpBR,EAAAA,cAAA,KAAGW,UAAU,kCAAkCP,EAAKmB,WAGxDvB,EAAAA,cAAA,OAAKW,UAAU,iBACbX,EAAAA,cAAA,OAAKW,UAAU,qBACbX,EAAAA,cAAA,KAAGW,UAAU,cAAcP,EAAKP,YAAYC,OAE9CE,EAAAA,cAAA,OAAKW,UAAU,6BACH,OAATM,GACCA,EAAKlB,KAAIV,GACPW,EAAAA,cAACwB,EAAAA,EAAO,CAACtB,IAAM,GAAEuB,IAAUpC,WAAae,EAAKP,YAAY6B,OAAQrC,IAAKA,SAK5E,C","sources":["webpack://zanechua-dot-com/./src/templates/Tags.jsx","webpack://zanechua-dot-com/./src/components/PostLink.jsx"],"sourcesContent":["import React from 'react';\n// Components\nimport { graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Layout from 'components/Layout';\nimport PostLink from 'components/PostLink';\nimport SEO from 'components/SEO';\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />);\n\n  return (\n    <Layout>\n      <SEO\n        keywords={['zanechua', 'homelab', 'zane j chua', 'tech geek']}\n        title=\"Tags\"\n        path={location.pathname}\n      />\n\n      <section>\n        <div className=\"flex flex-row justify-center items-center\">\n          <div className=\"flex-1\">\n            <h1 className=\"text-2xl font-bold\">\n              {totalCount} Post(s) with{' '}\n              <span className=\"inline-flex items-center justify-center px-2 py-1 font-bold leading-none text-white bg-blue-500 rounded\">\n                {tag}\n              </span>{' '}\n              tag\n            </h1>\n          </div>\n          <div className=\"flex-1 ml-auto text-right\">\n            <Link to=\"/tags\" className=\"font-bold\">\n              All Tags\n            </Link>\n          </div>\n        </div>\n        <div className=\"items-center\">{posts}</div>\n      </section>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fields {\n            urlPath\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            slug\n            title\n            tags\n            featuredImage {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired\n            })\n          })\n        }).isRequired\n      )\n    })\n  }).isRequired\n};\n\nexport default Tags;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { getSrc } from 'gatsby-plugin-image';\nimport { kebabCase } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport TagLink from 'components/TagLink';\n\nconst PostLink = ({ post }) => {\n  const featuredSrc = getSrc(post.frontmatter.featuredImage);\n  // const featuredSrcSet = featuredImgFluid.srcSet;\n  // const imageLink = featuredSrcSet.substring(0, featuredSrcSet.indexOf(' 200w'));\n\n  const { tags } = post.frontmatter;\n\n  return (\n    <div className=\"w-full lg:flex py-4\">\n      <Link\n        to={post.fields.urlPath}\n        className=\"block h-56 lg:w-64 lg:h-auto flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden\"\n        style={{\n          backgroundImage: `url(${featuredSrc})`,\n          backgroundPosition: 'center center'\n        }}\n        title={post.frontmatter.title}\n      />\n      <div className=\"flex-1 border-r border-b border-l border-gray-800 lg:border-l-0 lg:border-t lg:border-gray-700 rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal bg-gray-800\">\n        <Link to={post.fields.urlPath}>\n          <div className=\"mb-8\">\n            <div className=\"text-white font-bold text-xl mb-2 text-left\">\n              {post.frontmatter.title}\n            </div>\n            <p className=\"text-white text-base text-left\">{post.excerpt}</p>\n          </div>\n        </Link>\n        <div className=\"flex flex-row\">\n          <div className=\"flex pr-2 text-sm\">\n            <p className=\"text-white\">{post.frontmatter.date}</p>\n          </div>\n          <div className=\"flex-1 ml-auto text-right\">\n            {tags !== null &&\n              tags.map(tag => (\n                <TagLink key={`${kebabCase(tag)}-post-${post.frontmatter.slug}`} tag={tag} />\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    excerpt: PropTypes.string,\n    fields: PropTypes.shape({\n      urlPath: PropTypes.string\n    }),\n    frontmatter: PropTypes.shape({\n      slug: PropTypes.string,\n      title: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string),\n      date: PropTypes.string,\n      featuredImage: PropTypes.shape({\n        childImageSharp: PropTypes.shape({\n          gatsbyImageData: PropTypes.any\n        })\n      })\n    })\n  }).isRequired\n};\n\nexport default PostLink;\n"],"names":["_ref","pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","posts","filter","edge","node","frontmatter","date","map","React","PostLink","key","id","post","Layout","SEO","keywords","title","path","pathname","className","Link","to","featuredSrc","getSrc","featuredImage","tags","fields","urlPath","style","backgroundImage","backgroundPosition","excerpt","TagLink","_kebabCase","slug"],"sourceRoot":""}